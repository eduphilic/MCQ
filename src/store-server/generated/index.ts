// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Context } from "../Context";
import { HtmlConfig } from "../../models/HtmlConfig";
import { LocalizedString } from "../../models/LocalizedString";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type HtmlconfigResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => HtmlConfig | Promise<HtmlConfig>;

  export type LanguageResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => LocalizedString[] | Promise<LocalizedString[]>;

  export interface Type {
    htmlConfig: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => HtmlConfig | Promise<HtmlConfig>;

    language: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => LocalizedString[] | Promise<LocalizedString[]>;
  }
}

export namespace HtmlConfigResolvers {
  export const defaultResolvers = {
    googleAnalyticsId: (parent: HtmlConfig) =>
      parent.googleAnalyticsId === undefined ? null : parent.googleAnalyticsId,
    metaKeywords: (parent: HtmlConfig) =>
      parent.metaKeywords === undefined ? null : parent.metaKeywords,
    metaDescription: (parent: HtmlConfig) =>
      parent.metaDescription === undefined ? null : parent.metaDescription,
    metaAuthor: (parent: HtmlConfig) =>
      parent.metaAuthor === undefined ? null : parent.metaAuthor,
    metaAbstract: (parent: HtmlConfig) =>
      parent.metaAbstract === undefined ? null : parent.metaAbstract,
    metaCopyright: (parent: HtmlConfig) =>
      parent.metaCopyright === undefined ? null : parent.metaCopyright,
  };

  export type GoogleanalyticsidResolver = (
    parent: HtmlConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type MetakeywordsResolver = (
    parent: HtmlConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type MetadescriptionResolver = (
    parent: HtmlConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type MetaauthorResolver = (
    parent: HtmlConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type MetaabstractResolver = (
    parent: HtmlConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type MetacopyrightResolver = (
    parent: HtmlConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    googleAnalyticsId: (
      parent: HtmlConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    metaKeywords: (
      parent: HtmlConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    metaDescription: (
      parent: HtmlConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    metaAuthor: (
      parent: HtmlConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    metaAbstract: (
      parent: HtmlConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    metaCopyright: (
      parent: HtmlConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace LocalizedStringResolvers {
  export const defaultResolvers = {
    key: (parent: LocalizedString) => parent.key,
    en: (parent: LocalizedString) => parent.en,
    hi: (parent: LocalizedString) =>
      parent.hi === undefined ? null : parent.hi,
  };

  export type KeyResolver = (
    parent: LocalizedString,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type EnResolver = (
    parent: LocalizedString,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type HiResolver = (
    parent: LocalizedString,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    key: (
      parent: LocalizedString,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    en: (
      parent: LocalizedString,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    hi: (
      parent: LocalizedString,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  HtmlConfig: HtmlConfigResolvers.Type;
  LocalizedString: LocalizedStringResolvers.Type;
}
