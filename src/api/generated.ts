/* tslint:disable */
// DO NOT EDIT - AUTOGENERATED
// Generated using the command: "yarn graphql"

import { Context as ServerContext } from "./models";
import { GraphQLResolveInfo } from "graphql";

export type Resolver<Result, Parent = any, Context = any, Args = never> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo,
) => Promise<Result> | Result;

export interface ISubscriptionResolverObject<Result, Parent, Context, Args> {
  subscribe<R = Result, P = Parent>(
    parent: P,
    args: Args,
    context: Context,
    info: GraphQLResolveInfo,
  ): AsyncIterator<R | Result>;
  resolve?<R = Result, P = Parent>(
    parent: P,
    args: Args,
    context: Context,
    info: GraphQLResolveInfo,
  ): R | Result | Promise<R | Result>;
}

export type SubscriptionResolver<
  Result,
  Parent = any,
  Context = any,
  Args = never
> =
  | ((
      ...args: any[]
    ) => ISubscriptionResolverObject<Result, Parent, Context, Args>)
  | ISubscriptionResolverObject<Result, Parent, Context, Args>;

// ====================================================
// START: Typescript template
// ====================================================

// ====================================================
// Scalars
// ====================================================

/** Represents a localized string.The Hindi field is optional.Fields:- key: String!- en: String!- hi: String */
export type LocalizedString = any;

// ====================================================
// Types
// ====================================================

export interface Query {
  htmlConfig: HtmlConfig;

  indexPageConfig: IndexPageConfig;

  adminLoginPageConfig: AdminLoginPageConfig;

  session?: UserRole | null;

  sessionFormConfig: SessionFormConfig;

  language: LocalizationLanguage;
}
/** Configuration for the html document sent in response to all requests. */
export interface HtmlConfig {
  /** Google Analytics ID. */
  googleAnalyticsId?: string | null;
  /** Meta "keywords" tag. */
  metaKeywords?: string | null;
  /** Meta "description" tag. */
  metaDescription?: string | null;
  /** Meta "author" tag. */
  metaAuthor?: string | null;
  /** Meta "abstract" tag. */
  metaAbstract?: string | null;
  /** Meta "copyright" tag. */
  metaCopyright?: string | null;
  /** Landing footer text. */
  landingFooter?: string | null;
}
/** Configuration for the landing page / index page. */
export interface IndexPageConfig {
  /** The url to the hero image. */
  heroBackgroundImageUrl: string;
  /** The transparency of the hero image. */
  heroBackgroundAlpha: number;
  /** The primary hero text (large top text). */
  heroPrimaryText: LocalizedString;
  /** List of features below the primary hero text. */
  heroFeatures: LocalizedString[];
  /** Text in the green section below the hero section. */
  heroFooterText: LocalizedString;
  /** About section title. */
  aboutTitle: LocalizedString;
  /** Text below the about title. */
  aboutText: LocalizedString;
  /** Images in the about section. */
  aboutImages: IndexPageAboutImage[];
}
/** Image and supporting text in index about section. */
export interface IndexPageAboutImage {
  /** Image URL. */
  imageUrl: string;
  /** Large text below image. */
  title: LocalizedString;
  /** Small text below image. */
  text: LocalizedString;
}
/** Hero text for the admin login page. */
export interface AdminLoginPageConfig {
  heroPrimaryText: LocalizedString;

  heroSecondaryText: LocalizedString;
}
/** Configuration for login/signup forms. */
export interface SessionFormConfig {
  formTitleUserSignIn: LocalizedString;

  formTitleUserSignUp: LocalizedString;

  formTitleAdminSignIn: LocalizedString;

  fullNameFieldPlaceholder: LocalizedString;

  phoneNumberFieldPlaceholder: LocalizedString;

  passwordFieldPlaceholder: LocalizedString;

  passwordVerifyFieldPlaceholder: LocalizedString;

  emailAddressFieldPlaceholder: LocalizedString;

  submitButtonLabel: LocalizedString;

  termsConditionsCheckboxLabel: LocalizedString;

  passwordResetLinkLabel: LocalizedString;
}

export interface Mutation {
  login: LoginRequestResult;

  setLanguage: LocalizationLanguage;
}

// ====================================================
// Arguments
// ====================================================

export interface LoginMutationArgs {
  username: string;

  password: string;
}
export interface SetLanguageMutationArgs {
  language: LocalizationLanguage;
}

// ====================================================
// Enums
// ====================================================

export enum UserRole {
  USER = "USER",
  ADMIN = "ADMIN",
}

export enum LocalizationLanguage {
  ENGLISH = "ENGLISH",
  HINDI = "HINDI",
}

export enum LoginRequestResult {
  VALID = "VALID",
  INVALID = "INVALID",
}

// ====================================================
// END: Typescript template
// ====================================================

// ====================================================
// Resolvers
// ====================================================

export namespace QueryResolvers {
  export interface Resolvers<Context = ServerContext, TypeParent = never> {
    htmlConfig?: HtmlConfigResolver<HtmlConfig, TypeParent, Context>;

    indexPageConfig?: IndexPageConfigResolver<
      IndexPageConfig,
      TypeParent,
      Context
    >;

    adminLoginPageConfig?: AdminLoginPageConfigResolver<
      AdminLoginPageConfig,
      TypeParent,
      Context
    >;

    session?: SessionResolver<UserRole | null, TypeParent, Context>;

    sessionFormConfig?: SessionFormConfigResolver<
      SessionFormConfig,
      TypeParent,
      Context
    >;

    language?: LanguageResolver<LocalizationLanguage, TypeParent, Context>;
  }

  export type HtmlConfigResolver<
    R = HtmlConfig,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type IndexPageConfigResolver<
    R = IndexPageConfig,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type AdminLoginPageConfigResolver<
    R = AdminLoginPageConfig,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type SessionResolver<
    R = UserRole | null,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type SessionFormConfigResolver<
    R = SessionFormConfig,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type LanguageResolver<
    R = LocalizationLanguage,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
}
/** Configuration for the html document sent in response to all requests. */
export namespace HtmlConfigResolvers {
  export interface Resolvers<Context = ServerContext, TypeParent = HtmlConfig> {
    /** Google Analytics ID. */
    googleAnalyticsId?: GoogleAnalyticsIdResolver<
      string | null,
      TypeParent,
      Context
    >;
    /** Meta "keywords" tag. */
    metaKeywords?: MetaKeywordsResolver<string | null, TypeParent, Context>;
    /** Meta "description" tag. */
    metaDescription?: MetaDescriptionResolver<
      string | null,
      TypeParent,
      Context
    >;
    /** Meta "author" tag. */
    metaAuthor?: MetaAuthorResolver<string | null, TypeParent, Context>;
    /** Meta "abstract" tag. */
    metaAbstract?: MetaAbstractResolver<string | null, TypeParent, Context>;
    /** Meta "copyright" tag. */
    metaCopyright?: MetaCopyrightResolver<string | null, TypeParent, Context>;
    /** Landing footer text. */
    landingFooter?: LandingFooterResolver<string | null, TypeParent, Context>;
  }

  export type GoogleAnalyticsIdResolver<
    R = string | null,
    Parent = HtmlConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type MetaKeywordsResolver<
    R = string | null,
    Parent = HtmlConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type MetaDescriptionResolver<
    R = string | null,
    Parent = HtmlConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type MetaAuthorResolver<
    R = string | null,
    Parent = HtmlConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type MetaAbstractResolver<
    R = string | null,
    Parent = HtmlConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type MetaCopyrightResolver<
    R = string | null,
    Parent = HtmlConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type LandingFooterResolver<
    R = string | null,
    Parent = HtmlConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
}
/** Configuration for the landing page / index page. */
export namespace IndexPageConfigResolvers {
  export interface Resolvers<
    Context = ServerContext,
    TypeParent = IndexPageConfig
  > {
    /** The url to the hero image. */
    heroBackgroundImageUrl?: HeroBackgroundImageUrlResolver<
      string,
      TypeParent,
      Context
    >;
    /** The transparency of the hero image. */
    heroBackgroundAlpha?: HeroBackgroundAlphaResolver<
      number,
      TypeParent,
      Context
    >;
    /** The primary hero text (large top text). */
    heroPrimaryText?: HeroPrimaryTextResolver<
      LocalizedString,
      TypeParent,
      Context
    >;
    /** List of features below the primary hero text. */
    heroFeatures?: HeroFeaturesResolver<LocalizedString[], TypeParent, Context>;
    /** Text in the green section below the hero section. */
    heroFooterText?: HeroFooterTextResolver<
      LocalizedString,
      TypeParent,
      Context
    >;
    /** About section title. */
    aboutTitle?: AboutTitleResolver<LocalizedString, TypeParent, Context>;
    /** Text below the about title. */
    aboutText?: AboutTextResolver<LocalizedString, TypeParent, Context>;
    /** Images in the about section. */
    aboutImages?: AboutImagesResolver<
      IndexPageAboutImage[],
      TypeParent,
      Context
    >;
  }

  export type HeroBackgroundImageUrlResolver<
    R = string,
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type HeroBackgroundAlphaResolver<
    R = number,
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type HeroPrimaryTextResolver<
    R = LocalizedString,
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type HeroFeaturesResolver<
    R = LocalizedString[],
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type HeroFooterTextResolver<
    R = LocalizedString,
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type AboutTitleResolver<
    R = LocalizedString,
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type AboutTextResolver<
    R = LocalizedString,
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type AboutImagesResolver<
    R = IndexPageAboutImage[],
    Parent = IndexPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
}
/** Image and supporting text in index about section. */
export namespace IndexPageAboutImageResolvers {
  export interface Resolvers<
    Context = ServerContext,
    TypeParent = IndexPageAboutImage
  > {
    /** Image URL. */
    imageUrl?: ImageUrlResolver<string, TypeParent, Context>;
    /** Large text below image. */
    title?: TitleResolver<LocalizedString, TypeParent, Context>;
    /** Small text below image. */
    text?: TextResolver<LocalizedString, TypeParent, Context>;
  }

  export type ImageUrlResolver<
    R = string,
    Parent = IndexPageAboutImage,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type TitleResolver<
    R = LocalizedString,
    Parent = IndexPageAboutImage,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type TextResolver<
    R = LocalizedString,
    Parent = IndexPageAboutImage,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
}
/** Hero text for the admin login page. */
export namespace AdminLoginPageConfigResolvers {
  export interface Resolvers<
    Context = ServerContext,
    TypeParent = AdminLoginPageConfig
  > {
    heroPrimaryText?: HeroPrimaryTextResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    heroSecondaryText?: HeroSecondaryTextResolver<
      LocalizedString,
      TypeParent,
      Context
    >;
  }

  export type HeroPrimaryTextResolver<
    R = LocalizedString,
    Parent = AdminLoginPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type HeroSecondaryTextResolver<
    R = LocalizedString,
    Parent = AdminLoginPageConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
}
/** Configuration for login/signup forms. */
export namespace SessionFormConfigResolvers {
  export interface Resolvers<
    Context = ServerContext,
    TypeParent = SessionFormConfig
  > {
    formTitleUserSignIn?: FormTitleUserSignInResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    formTitleUserSignUp?: FormTitleUserSignUpResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    formTitleAdminSignIn?: FormTitleAdminSignInResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    fullNameFieldPlaceholder?: FullNameFieldPlaceholderResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    phoneNumberFieldPlaceholder?: PhoneNumberFieldPlaceholderResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    passwordFieldPlaceholder?: PasswordFieldPlaceholderResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    passwordVerifyFieldPlaceholder?: PasswordVerifyFieldPlaceholderResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    emailAddressFieldPlaceholder?: EmailAddressFieldPlaceholderResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    submitButtonLabel?: SubmitButtonLabelResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    termsConditionsCheckboxLabel?: TermsConditionsCheckboxLabelResolver<
      LocalizedString,
      TypeParent,
      Context
    >;

    passwordResetLinkLabel?: PasswordResetLinkLabelResolver<
      LocalizedString,
      TypeParent,
      Context
    >;
  }

  export type FormTitleUserSignInResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type FormTitleUserSignUpResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type FormTitleAdminSignInResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type FullNameFieldPlaceholderResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type PhoneNumberFieldPlaceholderResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type PasswordFieldPlaceholderResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type PasswordVerifyFieldPlaceholderResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type EmailAddressFieldPlaceholderResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type SubmitButtonLabelResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type TermsConditionsCheckboxLabelResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
  export type PasswordResetLinkLabelResolver<
    R = LocalizedString,
    Parent = SessionFormConfig,
    Context = ServerContext
  > = Resolver<R, Parent, Context>;
}

export namespace MutationResolvers {
  export interface Resolvers<Context = ServerContext, TypeParent = never> {
    login?: LoginResolver<LoginRequestResult, TypeParent, Context>;

    setLanguage?: SetLanguageResolver<
      LocalizationLanguage,
      TypeParent,
      Context
    >;
  }

  export type LoginResolver<
    R = LoginRequestResult,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context, LoginArgs>;
  export interface LoginArgs {
    username: string;

    password: string;
  }

  export type SetLanguageResolver<
    R = LocalizationLanguage,
    Parent = never,
    Context = ServerContext
  > = Resolver<R, Parent, Context, SetLanguageArgs>;
  export interface SetLanguageArgs {
    language: LocalizationLanguage;
  }
}
